# === ƒê∆ØA PROJECT ROOT V√ÄO sys.path ƒë·ªÉ import "modules/..." ===
from pathlib import Path
import sys
ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

import io
import os
import zipfile
import streamlit as st
import pandas as pd
from typing import List

# Import 2 h√†m run b·∫°n ƒë√£ c√≥ (gi·ªØ nguy√™n logic b√™n trong)
from modules.thanh_toan_tb.TH_TRA_THUONG import run as merge_run   # h·ª£p nh·∫•t
from modules.thanh_toan_tb.main_TT_tra_thuong import run as main_run  # t√≠nh th∆∞·ªüng

st.title("üí∏ Thanh to√°n tr·∫£ th∆∞·ªüng tr∆∞ng b√†y")
st.caption("Kh√¥ng l∆∞u file v√†o ƒëƒ©a ‚Äî x·ª≠ l√Ω tr·ª±c ti·∫øp tr√™n b·ªô nh·ªõ v√† cho t·∫£i k·∫øt qu·∫£.")

# ====== 1) H·ª¢P NH·∫§T FILE T·ª™ HT DMS (tu·ª≥ ch·ªçn, kh√¥ng ghi data/raw) ======
st.subheader("1) H·ª£p nh·∫•t file t·ª´ HT DMS (tu·ª≥ ch·ªçn)")
uploaded_many = st.file_uploader(
    "T·∫£i nhi·ªÅu file DMS (Excel) ƒë·ªÉ h·ª£p nh·∫•t ‚Üí xu·∫•t 1 t·ªáp h·ª£p nh·∫•t",
    type=["xlsx", "xls"],
    accept_multiple_files=True
)

def run_merge_in_memory(files: List[st.runtime.uploaded_file_manager.UploadedFile]) -> bytes:
    """
    D√πng t·∫°m th∆∞ m·ª•c ·∫£o trong zipfs ƒë·ªÉ gi·ªØ nguy√™n logic merge_run (n·∫øu b√™n trong c·∫ßn os.listdir()),
    nh∆∞ng ta s·∫Ω kh√¥ng ghi ra ƒëƒ©a th·∫≠t: t·∫°o 1 zip in-memory, mount t·∫°m, ho·∫∑c
    ƒë∆°n gi·∫£n h∆°n: ghi c√°c file v√†o 1 TemporaryDirectory r·ªìi x√≥a ngay sau d√πng.
    ·ªû ƒë√¢y d√πng TemporaryDirectory cho d·ªÖ hi·ªÉu.
    """
    import tempfile
    from pathlib import Path

    with tempfile.TemporaryDirectory() as tmpdir:
        tmpdir = Path(tmpdir)
        # L∆∞u t·ª´ng file upload v√†o th∆∞ m·ª•c t·∫°m (ch·ªâ t·ªìn t·∫°i trong v√≤ng ƒë·ªùi request)
        for f in files:
            (tmpdir / f.name).write_bytes(f.getbuffer())
        # G·ªçi merge_run v·ªõi input_dir l√† th∆∞ m·ª•c t·∫°m & output_path l√† file t·∫°m trong th∆∞ m·ª•c ƒë√≥
        out_path = tmpdir / "output-tra-thuong.xlsx"
        merge_run(input_dir=tmpdir, output_path=out_path)
        return out_path.read_bytes()  # tr·∫£ v·ªÅ bytes c·ªßa file k·∫øt qu·∫£

if uploaded_many:
    if st.button("üìÇ H·ª£p nh·∫•t d·ªØ li·ªáu (kh√¥ng l∆∞u ra ƒëƒ©a)"):
        try:
            merged_bytes = run_merge_in_memory(uploaded_many)
            st.success("‚úÖ ƒê√£ h·ª£p nh·∫•t xong! T·∫£i t·ªáp k·∫øt qu·∫£ b√™n d∆∞·ªõi.")
            st.download_button(
                "‚¨áÔ∏è T·∫£i file h·ª£p nh·∫•t (output-tra-thuong.xlsx)",
                data=merged_bytes,
                file_name="output-tra-thuong.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
        except Exception as e:
            st.error(f"‚ùå L·ªói khi h·ª£p nh·∫•t: {e}")

st.divider()

# ====== 2) CH·∫†Y T√çNH TR·∫¢ TH∆Ø·ªûNG (ƒë·∫ßu v√†o l√† 1 file, x·ª≠ l√Ω tr√™n b·ªô nh·ªõ) ======
st.subheader("2) Ch·∫°y t√≠nh tr·∫£ th∆∞·ªüng (main)")
one_file = st.file_uploader(
    "Ch·ªçn 1 file ƒë·∫ßu v√†o c√≥ sheet 'S·ªë ti·ªÅn ƒë√£ tr·∫£ th∆∞·ªüng' (vd: output-tra-thuong.xlsx)",
    type=["xlsx", "xls"], accept_multiple_files=False
)

def run_main_in_memory(file_bytes: bytes) -> dict:
    """
    G·ªçi main_run nh∆∞ng l∆∞u output.xlsx & alert.xlsx v√†o th∆∞ m·ª•c t·∫°m,
    r·ªìi ƒë·ªçc l·∫°i bytes ƒë·ªÉ tr·∫£ v·ªÅ (kh√¥ng ƒë·ªÉ l·∫°i file n√†o tr√™n ƒëƒ©a ·ª©ng d·ª•ng).
    """
    import tempfile
    from pathlib import Path

    with tempfile.TemporaryDirectory() as tmpdir:
        tmpdir_p = Path(tmpdir)
        in_path = tmpdir_p / "input.xlsx"
        out_path = tmpdir_p / "output.xlsx"
        alert_path = tmpdir_p / "alert.xlsx"

        in_path.write_bytes(file_bytes)
        # G·ªçi h√†m main c·ªßa b·∫°n
        main_run(input_file=in_path, output_file=out_path, alert_file=alert_path)

        result = {}
        if out_path.exists():
            result["output.xlsx"] = out_path.read_bytes()
        if alert_path.exists():
            result["alert.xlsx"] = alert_path.read_bytes()
        return result

if one_file:
    if st.button("‚ñ∂Ô∏è T√≠nh th∆∞·ªüng (kh√¥ng l∆∞u ra ƒëƒ©a)"):
        try:
            results = run_main_in_memory(one_file.getbuffer())
            if not results:
                st.warning("Kh√¥ng t·∫°o ƒë∆∞·ª£c output n√†o (output.xlsx / alert.xlsx).")
            else:
                st.success("‚úÖ X·ª≠ l√Ω xong! T·∫£i file b√™n d∆∞·ªõi.")
                # Cho t·∫£i t·ª´ng file; ƒë·ªìng th·ªùi n·∫øu c√≥ output.xlsx, preview sheet ƒë·∫ßu
                for name, bts in results.items():
                    if name == "output.xlsx":
                        try:
                            xls = pd.ExcelFile(io.BytesIO(bts))
                            first_sheet = xls.sheet_names[0]
                            df_head = pd.read_excel(xls, sheet_name=first_sheet).head(100)
                            st.caption(f"Xem nhanh **{name}** ‚Äì sheet ƒë·∫ßu: **{first_sheet}** (100 d√≤ng)")
                            st.dataframe(df_head, use_container_width=True)
                        except Exception:
                            pass

                    st.download_button(
                        f"‚¨áÔ∏è T·∫£i {name}",
                        data=bts,
                        file_name=name,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key=f"dl_{name}",
                    )
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t√≠nh th∆∞·ªüng: {e}")
