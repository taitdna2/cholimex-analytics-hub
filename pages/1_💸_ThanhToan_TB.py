# pages/1_üí∏_ThanhToan_TB.py
from __future__ import annotations
# ==== ƒë·∫£m b·∫£o import modules/... ====
from pathlib import Path
import sys
ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))

import streamlit as st
import pandas as pd
import os, tempfile, shutil
from modules.thanh_toan_tb.TH_TRA_THUONG import run as merge_run
from modules.thanh_toan_tb.main_TT_tra_thuong import run as main_run

st.title("üí∏ Thanh to√°n tr·∫£ th∆∞·ªüng tr∆∞ng b√†y")

RAW_DIR = ROOT / "data" / "raw"
EXPORT_DIR = ROOT / "data" / "exports"
for d in [RAW_DIR, EXPORT_DIR, ROOT / "data" / "processed", ROOT / "logs"]:
    d.mkdir(parents=True, exist_ok=True)

# ========== B1. H·ª¢P NH·∫§T ==========
st.subheader("1) H·ª£p nh·∫•t file t·ª´ HT DMS (tu·ª≥ ch·ªçn)")
uploaded_files = st.file_uploader(
    "T·∫£i nhi·ªÅu file DMS (Excel) ƒë·ªÉ h·ª£p nh·∫•t",
    type=["xlsx", "xls"],
    accept_multiple_files=True
)

save_mode = st.radio(
    "Ch·ªçn c√°ch l∆∞u file upload:",
    ["D√πng t·∫°m (kh√¥ng l∆∞u)", "L∆∞u v√†o data/raw"],
    horizontal=True
)

if uploaded_files and st.button("üìÇ H·ª£p nh·∫•t d·ªØ li·ªáu"):
    # Ch·ªçn n∆°i ƒë·∫∑t file ƒë·∫ßu v√†o
    if save_mode == "D√πng t·∫°m (kh√¥ng l∆∞u)":
        work_dir = Path(tempfile.mkdtemp(prefix="merge_tmp_"))
    else:
        work_dir = RAW_DIR

    # Ghi file l√™n work_dir
    saved_paths = []
    for f in uploaded_files:
        out_path = work_dir / f.name
        with open(out_path, "wb") as g:
            g.write(f.getbuffer())
        saved_paths.append(out_path)

    st.success(f"ƒê√£ nh·∫≠n {len(saved_paths)} file.")

    try:
        out_merged = work_dir / "output-tra-thuong.xlsx"
        merge_run(input_dir=work_dir, output_path=out_merged)
        st.success(f"‚úÖ H·ª£p nh·∫•t xong: `{out_merged}`")

        # Cho ph√©p t·∫£i tr·ª±c ti·∫øp file h·ª£p nh·∫•t
        with open(out_merged, "rb") as f:
            st.download_button(
                "‚¨áÔ∏è T·∫£i output-tra-thuong.xlsx",
                data=f.read(),
                file_name="output-tra-thuong.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

    except Exception as e:
        st.error(f"‚ùå L·ªói khi h·ª£p nh·∫•t: {e}")

    finally:
        # N·∫øu l√† th∆∞ m·ª•c t·∫°m th√¨ d·ªçn d·∫πp
        if save_mode == "D√πng t·∫°m (kh√¥ng l∆∞u)":
            try:
                shutil.rmtree(work_dir, ignore_errors=True)
            except Exception:
                pass

st.divider()

# ========== B2. CH·∫†Y MAIN ==========
st.subheader("2) Ch·∫°y t√≠nh tr·∫£ th∆∞·ªüng (main)")
input_file = st.file_uploader(
    "Ch·ªçn 1 file ƒë·∫ßu v√†o c√≥ sheet 'S·ªë ti·ªÅn ƒë√£ tr·∫£ th∆∞·ªüng' (v√≠ d·ª•: output-tra-thuong.xlsx)",
    type=["xlsx", "xls"],
)

if input_file:
    # kh√¥ng b·∫Øt bu·ªôc l∆∞u; d√πng t·∫°m file ƒë·ªÉ ƒë·ªçc
    tmp_dir = Path(tempfile.mkdtemp(prefix="main_tmp_"))
    in_path = tmp_dir / input_file.name
    with open(in_path, "wb") as f:
        f.write(input_file.getbuffer())
    st.info(f"ƒê√£ nh·∫≠n file: `{input_file.name}`")

    if st.button("‚ñ∂Ô∏è T√≠nh th∆∞·ªüng"):
        try:
            out_path = tmp_dir / "output.xlsx"
            alert_path = tmp_dir / "alert.xlsx"

            main_run(
                input_file=in_path,
                output_file=out_path,
                alert_file=alert_path
            )

            # Hi·ªÉn th·ªã & cho t·∫£i
            for p in [out_path, alert_path]:
                if p.exists():
                    st.markdown(f"**T·ªáp t·∫°o:** `{p.name}`")
                    try:
                        xls = pd.ExcelFile(p)
                        first_sheet = xls.sheet_names[0]
                        df_preview = pd.read_excel(xls, sheet_name=first_sheet).head(100)
                        st.caption(f"Xem nhanh sheet: **{first_sheet}** (100 d√≤ng ƒë·∫ßu)")
                        st.dataframe(df_preview, use_container_width=True)
                    except Exception:
                        pass

                    with open(p, "rb") as f:
                        st.download_button(
                            f"‚¨áÔ∏è T·∫£i {p.name}",
                            data=f.read(),
                            file_name=p.name,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key=f"dl_{p.name}"
                        )
                else:
                    st.warning(f"Kh√¥ng th·∫•y file {p.name}")

        except Exception as e:
            st.error(f"‚ùå L·ªói khi t√≠nh th∆∞·ªüng: {e}")
        finally:
            shutil.rmtree(tmp_dir, ignore_errors=True)
